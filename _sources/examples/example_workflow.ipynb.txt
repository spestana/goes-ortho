{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3aea64b8-4c4c-478f-85a3-a5c36321c4c9",
   "metadata": {},
   "source": [
    "# Example workflow\n",
    "\n",
    "This notebook demonstrates downloading a short time series of GOES-R ABI imagery, merging the individual images into a single zarr dataset, and orthorectifying those images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c0d77eb-457b-4b4d-a669-73778a54637e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/goes2go/data.py:665: FutureWarning: 'H' is deprecated and will be removed in a future version. Please use 'h' instead of 'H'.\n",
      "  within=pd.to_timedelta(config[\"nearesttime\"].get(\"within\", \"1h\")),\n",
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/goes2go/NEW.py:188: FutureWarning: 'H' is deprecated and will be removed in a future version. Please use 'h' instead of 'H'.\n",
      "  within=pd.to_timedelta(config[\"nearesttime\"].get(\"within\", \"1h\")),\n"
     ]
    }
   ],
   "source": [
    "import goes_ortho as go\n",
    "import xarray as xr\n",
    "import geogif\n",
    "import shutil"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e01f57b-bbbe-4ebf-9c25-fff635326c2d",
   "metadata": {},
   "source": [
    "First, specify the time range, location bounds, satellite, product (and if applicable, band and variable) that we'd like to access.\n",
    "\n",
    "We will also need to provide an API key for [OpenTopography.org](https://portal.opentopography.org/requestService?service=api) which you can create with a free account. This allows goes_ortho to access digital elevation models to perform the orthorectification step.\n",
    "\n",
    "The workflow below was developed to read a json file containing information about what we'd like to download. This was done to 1) allow these functions to run through github actions (still an experimental feature) and 2) keep a record of datasets we've downloaded. This is something that may change in the near future since it adds an unnecessary step for most use cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "28208c5f-e93c-4ce9-b4f7-c4c7ea14e12e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make request file from user input\n",
    "request_filepath = go.get_data.make_request_json(workflowName = \"example\",\n",
    "                                                 startDatetime = \"2024-09-19T00:00:00Z\",\n",
    "                                                 endDatetime = \"2024-09-20T00:59:00Z\",\n",
    "                                                 bounds = go.get_data.bounds_from_geojson(\"grand_mesa.geojson\"),\n",
    "                                                 satellite = \"goes18\",\n",
    "                                                 product = \"ABI-L2-LSTC\",\n",
    "                                                 band = 2,\n",
    "                                                 variable = \"LST\",\n",
    "                                                 apiKey = None,\n",
    "                                                )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eebc03e-2e78-44b8-beeb-e6914e454b2e",
   "metadata": {},
   "source": [
    "The functions below demonstrate downloading GOES imagery using two different downloader packages: [goes2go](https://goes2go.readthedocs.io/en/latest/) and [goespy](https://github.com/spestana/goes-py) (the goespy functions are now integrated directly within the goes-ortho package). I have found goes2go is typically faster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9fbfaf9c-938a-475a-a1f7-f2a36b062505",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Estimated 9 batches to download\n",
      "Batch number 1\n",
      "Download batch of imagery from 2024-09-19 00:00:00+00:00 to 2024-09-19 03:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:01<00:00,  1.81it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 2\n",
      "Download batch of imagery from 2024-09-19 03:00:00+00:00 to 2024-09-19 06:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.92it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 3\n",
      "Download batch of imagery from 2024-09-19 06:00:00+00:00 to 2024-09-19 09:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.86it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 4\n",
      "Download batch of imagery from 2024-09-19 09:00:00+00:00 to 2024-09-19 12:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.92it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 5\n",
      "Download batch of imagery from 2024-09-19 12:00:00+00:00 to 2024-09-19 15:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.88it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 6\n",
      "Download batch of imagery from 2024-09-19 15:00:00+00:00 to 2024-09-19 18:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.85it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 7\n",
      "Download batch of imagery from 2024-09-19 18:00:00+00:00 to 2024-09-19 21:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 8\n",
      "Download batch of imagery from 2024-09-19 21:00:00+00:00 to 2024-09-20 00:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.78it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Batch number 9\n",
      "Download batch of imagery from 2024-09-20 00:00:00+00:00 to 2024-09-20 03:00:00+00:00\n",
      "ðŸ“¦ Finished downloading [3] files to [/home/spestana/data/noaa-goes18/ABI-L2-LSTC].\n",
      "Cropping image batch to [-108.368202, 38.80429, -107.627676, 39.211234]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 3/3 [00:00<00:00,  6.78it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done\n",
      "CPU times: user 5.34 s, sys: 465 ms, total: 5.8 s\n",
      "Wall time: 13.5 s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "filepaths = go.get_data.download_abi_goes2go(request_filepath)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90be885d-c57f-4039-991c-9ef2543d3a78",
   "metadata": {},
   "source": [
    "Merge all the individual NetCDFs that we just downloaded into a single zarr file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "49523213-4a9a-4514-bed9-ef980387b572",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Dask dashboard at: http://127.0.0.1:8786/status\n",
      "Workers: 6\n",
      "Threads per worker: 2 \n",
      "\n",
      "read all the netcdf files, drop attributes where there are conflicts\n",
      "configure chunking on variables with dimensions of (time, x, y)\n",
      "Assign the dimensions of a chunk to variables to use for encoding afterwards\n",
      "Assign the dimensions of a chunk to variables to use for encoding afterwards\n",
      "Assign the dimensions of a chunk to variables to use for encoding afterwards\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/spestana/git/goes-ortho/src/goes_ortho/get_data.py:691: UserWarning: Times can't be serialized faithfully to int64 with requested units 'days since 2024-09-19T00:01:17'. Serializing with units 'hours since 2024-09-19T00:01:17' instead. Set encoding['dtype'] to floating point dtype to serialize with units 'days since 2024-09-19T00:01:17'. Set encoding['units'] to 'hours since 2024-09-19T00:01:17' to silence this warning .\n",
      "  ds.to_zarr(zarr_filepath)\n"
     ]
    }
   ],
   "source": [
    "zarr_filepath = f\"my_file.zarr\"\n",
    "# remove if file already exists\n",
    "shutil.rmtree(zarr_filepath, ignore_errors=True)\n",
    "zarr_filepath = go.get_data.multi_nc_to_zarr(filepaths, zarr_filepath)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "226328c3-60f6-4126-84fa-1d4fe4dd2377",
   "metadata": {},
   "source": [
    "Orthorectify the imagery in the zarr file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1c376545-ccc1-4774-b9ad-e22eeb7f55fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://portal.opentopography.org/API/globaldem?demtype=SRTMGL3&west=-108.368202&south=38.80429&east=-107.627676&north=39.211234&outputFormat=GTiff&API_Key=585b1d1639bc5ef8a4a5bdea7e45a8d1\n",
      "/bin/gdalwarp -r cubic -co COMPRESS=LZW -co TILED=YES -co BIGTIFF=IF_SAFER -tr 30 30 -t_srs '+proj=lonlat +datum=GRS80' temp_SRTMGL3_DEM.tif temp_SRTMGL3_DEM_proj.tif\n",
      "/bin/gdalwarp -r cubic -co COMPRESS=LZW -co TILED=YES -co BIGTIFF=IF_SAFER -tr 30 30 -t_srs '+proj=lonlat +datum=GRS80' temp_SRTMGL3_DEM.tif temp_SRTMGL3_DEM_proj.tif\n",
      "Usage: gdalwarp [--help-general] [--formats]\n",
      "    [-s_srs srs_def] [-t_srs srs_def] [-to \"NAME=VALUE\"]* [-novshiftgrid]\n",
      "    [-order n | -tps | -rpc | -geoloc] [-et err_threshold]\n",
      "    [-refine_gcps tolerance [minimum_gcps]]\n",
      "    [-te xmin ymin xmax ymax] [-tr xres yres] [-tap] [-ts width height]\n",
      "    [-ovr level|AUTO|AUTO-n|NONE] [-wo \"NAME=VALUE\"] [-ot Byte/Int16/...] [-wt Byte/Int16]\n",
      "    [-srcnodata \"value [value...]\"] [-dstnodata \"value [value...]\"] -dstalpha\n",
      "    [-r resampling_method] [-wm memory_in_mb] [-multi] [-q]\n",
      "    [-cutline datasource] [-cl layer] [-cwhere expression]\n",
      "    [-csql statement] [-cblend dist_in_pixels] [-crop_to_cutline]\n",
      "    [-if format]* [-of format] [-co \"NAME=VALUE\"]* [-overwrite]\n",
      "    [-nomd] [-cvmd meta_conflict_value] [-setci] [-oo NAME=VALUE]*\n",
      "    [-doo NAME=VALUE]*\n",
      "    srcfile* dstfile\n",
      "\n",
      "Available resampling methods:\n",
      "    near (default), bilinear, cubic, cubicspline, lanczos, average, rms,\n",
      "    mode,  max, min, med, Q1, Q3, sum.\n",
      "\n",
      "RUNNING: make_ortho_map()\n",
      "\n",
      "Opening GOES ABI image...\n",
      "\n",
      "Get inputs: projection information from the ABI radiance product\n",
      "...done\n",
      "\n",
      "Opening DEM file...\n",
      "\n",
      "Create 2D arrays of longitude and latitude from the DEM\n",
      "...done\n",
      "\n",
      "For each grid cell in the DEM, compute the corresponding ABI scan angle (x and y, radians)\n",
      "...done\n",
      "\n",
      "Create metadata dictionary about this map\n",
      "...done\n",
      "\n",
      "Create pixel map dataset\n",
      "...done\n",
      "\n",
      "Return the pixel map dataset.\n",
      "\n",
      "RUNNING: orthorectify_abi_rad()\n",
      "\n",
      "Does the projection info in the image match our mapping?\n",
      "\n",
      "Opening GOES ABI image...\t\t\tABI image value\tPixel map value\n",
      "perspective_point_height + semi_major_axis:\t42164160.0\t42164160.0\n",
      "semi_major_axis:\t\t\t\t6378137.0\t6378137.0\n",
      "semi_minor_axis:\t\t\t\t6356752.31414\t6356752.31414\n",
      "longitude_of_projection_origin:\t\t\t-137.0\t\t-137.0\n",
      "...done\n",
      "\n",
      "Map (orthorectify) and clip the image to the pixel map for LST\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "ERROR 1: PROJ: proj_create: Error -9 (unknown elliptical parameter name)\n",
      "ERROR 1: Translating source or target SRS failed:\n",
      "+proj=lonlat +datum=GRS80\n",
      "Child returned 1\n",
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/xarray/backends/plugins.py:149: RuntimeWarning: 'netcdf4' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n",
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/xarray/backends/plugins.py:149: RuntimeWarning: 'h5netcdf' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n",
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/xarray/backends/plugins.py:149: RuntimeWarning: 'scipy' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n",
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/xarray/backends/plugins.py:149: RuntimeWarning: 'netcdf4' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n",
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/xarray/backends/plugins.py:149: RuntimeWarning: 'h5netcdf' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n",
      "/home/spestana/.conda/envs/goes-test-env/lib/python3.12/site-packages/xarray/backends/plugins.py:149: RuntimeWarning: 'scipy' fails while guessing\n",
      "  warnings.warn(f\"{engine!r} fails while guessing\", RuntimeWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "...done\n",
      "(27, 488, 889)\n",
      "\n",
      "Map (orthorectify) and clip the image to the pixel map for ABI Fixed Grid coordinates\n",
      "...done\n",
      "\n",
      "Create zone labels for each unique pair of ABI Fixed Grid coordinates (for each orthorectified pixel footprint)\n",
      "(488, 889)\n",
      "...done\n",
      "\n",
      "Output this result to a new zarr file\n",
      "Saving file as: test_ortho7.zarr\n",
      "...done\n"
     ]
    }
   ],
   "source": [
    "bounds = go.get_data.bounds_from_geojson(\"grand_mesa.geojson\")\n",
    "\n",
    "api_key = \"585b1d1639bc5ef8a4a5bdea7e45a8d1\"\n",
    "out_filename = 'test_ortho7.zarr'\n",
    "shutil.rmtree(out_filename, ignore_errors=True)\n",
    "go.orthorectify.ortho_zarr(\n",
    "    zarr_filepath,\n",
    "    ['LST'],\n",
    "    bounds,\n",
    "    api_key,\n",
    "    out_filename,\n",
    "    dem_filepath=None,\n",
    "    demtype=\"SRTMGL3\",\n",
    "    keep_dem=False,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "086756a9-9e42-4867-9410-10198ebdbe63",
   "metadata": {},
   "source": [
    "Open the orthorectified imagery file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bb78ec87-2a3a-4418-a314-20ead2806a0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "ds = xr.open_zarr(out_filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ccb7d96-c2f8-40de-a626-3208fca8b0c0",
   "metadata": {},
   "source": [
    "Make a gif animation to preview it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bd83d09e-a8a5-45b4-ba7d-7376e8db4cf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'LST'\n",
    "# select our variable of interest\n",
    "da = ds[variable]\n",
    "\n",
    "# create the gif animation\n",
    "gif_bytes = geogif.dgif(\n",
    "    da,\n",
    "    fps=5,\n",
    "    cmap=\"Greys_r\",\n",
    "    date_format=\"%Y-%m-%d %H:%M:%S\",\n",
    "    date_position=\"ul\",\n",
    "    bytes=True,\n",
    ").compute()\n",
    "\n",
    "# write gif to file\n",
    "with open(f\"test6.gif\", \"wb\") as f:\n",
    "    f.write(gif_bytes)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f15c4c93-9d86-4c88-a832-9f510ade26c2",
   "metadata": {},
   "source": [
    "Take a look at the gif image we just made:\n",
    "\n",
    "<img src=\"test6.gif\" alt=\"GOES-18 animation\" width=\"400\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b9f5260-4d30-4782-8760-0a845484896d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "goes-test-env",
   "language": "python",
   "name": "goes-test-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
